<!--行业营运情况-->
<template>
	<div class="tw-template-wrapper">
		<el-form :inline="true" :model="query" size="small" class="tw-query-bar">
			<el-form-item>
				<el-autocomplete class="inline-input" v-model="query.vehicle"
												 :fetch-suggestions="queryVehicleSearch" :trigger-on-focus="false"
												 @select="handleVehicleSelect" placeholder="请输入车牌号码"></el-autocomplete>
			</el-form-item>
			<el-form-item>
				<el-autocomplete class="inline-input" v-model="query.companyName" placeholder="公司名称"
												 :fetch-suggestions="queryCompanyNameSearch" :trigger-on-focus="false"
												 @select="handleCompanyNameSelect"></el-autocomplete>
			</el-form-item>
			<el-form-item>
				<el-date-picker arrow-control type="datetime" v-model="query.sTime" placeholder="开始时间"></el-date-picker>
			</el-form-item>
			<el-form-item>
				<el-date-picker arrow-control type="datetime" v-model="query.eTime" placeholder="结束时间"></el-date-picker>
			</el-form-item>
			<el-form-item>
				<el-button type="primary" @click="handleQueryClick">查询</el-button>
				<el-button type="primary" @click="handleExportClick">导出</el-button>
			</el-form-item>
		</el-form>
		<div class="tw-query-panel">
			<el-table :data="filterTableList" v-loading="table.loading" border size="small" height="calc(100% - 42px)" style="width: 100%; margin-bottom: 10px;">
				<el-table-column type="index" label="序号" width="60"></el-table-column>
				<el-table-column prop="DAY" label="日期" min-width="160"></el-table-column>
				<el-table-column prop="CPHM" label="车辆数" width="140"></el-table-column>
				<el-table-column prop="TJCS" label="营运次数" width="140"></el-table-column>
				<el-table-column prop="JINE" label="营运金额" width="140"></el-table-column>
				<el-table-column prop="SZLC" label="营运里程" width="140"></el-table-column>
				<el-table-column prop="KSLC" label="空驶里程" width="140"></el-table-column>
				<el-table-column prop="YSSC" label="载客时间" width="140"></el-table-column>
				<el-table-column prop="DHSJ" label="载客等候时间" width="140"></el-table-column>
			</el-table>
			<el-pagination background :page-size="table.pageSize" :current-page="table.currentPage" :total="table.total" layout="prev, pager, next" @current-change="handleTablePageCurrentChange"></el-pagination>
		</div>
	</div>
</template>

<script>
	import _ from 'underscore'
	import axios from 'axios'
	import moment from 'moment'
	import TWUnit from '../../components/TWTableColumn/TWUnit'
	import {formatCustomizeDate, formatDateTime} from '../../assets/js/util'

	export default {
		name: "IndustryOperation",
		data() {
			return {
				query: {
					vehicle: '',
					companyName: '',
					sTime: '',
					eTime: ''
				},
				table: {
					loading: false,
					data: [
						{
							riqi: '2019-02-25',
							cls: 7658,
							yycs: 92325,
							yyje: 2930144,
							yylc: 1311287,
							kslc: 520075,
							zksj: 1721246,
							zkdhsj: 463293,
						}
					],
					pageSize: 20,
					currentPage: 1,
					total: 0
				}
			}
		},
		mounted() {
			this.$nextTick(() => {
				this.query.sTime = formatCustomizeDate(moment(), 'YYYY-MM-DD 00:00:00');
				this.query.eTime = formatCustomizeDate(moment(), 'YYYY-MM-DD 23:59:59');
				this.getIndustryOperations();
				this.getCompany();
				this.getVehicle();
			});
		},
		computed: {
			filterTableList() {
				const {data, pageSize, currentPage} = this.table;
				const pageIndex = currentPage -1;
				return _.filter(data, (item, index) => {
					return  index >= pageIndex * pageSize && index < currentPage * pageSize;
				})
			}
		},
		methods: {
			/*接口*/
			getIndustryOperations(){
				this.table.loading = true;
				const {vehicle, companyName, sTime, eTime} = this.query;
				axios.get('/industryOperation/getIndustryOperations', {
					baseURL: this.baseURL,
					params: {
						vehiNo:vehicle,
						companyName:companyName,
						stime: sTime && moment(sTime).format('YYYY-MM-DD HH:mm:ss'),
						etime: eTime && moment(eTime).format('YYYY-MM-DD HH:mm:ss')
					}
				}).then(res => {
					console.info(res.data)
					this.table.data = res.data || [];
					this.table.currentPage = 1;
					this.table.total = this.table.data.length;
					this.table.loading = false;
				})
			},
			getCompany() {
				axios.get('/common/company', {
					baseURL: this.baseURL,
					params: {}
				}).then(res => {
					this.company = _.map(res.data, item => item.COMP_NAME) || [];
				}).catch(function (error) {
					console.log(error);
				});
			},
			queryCompanyNameSearch(query, cb) {
				cb(_.map(_.filter(this.company, item => item.indexOf(query) > -1), item => {
					return {label: item, value: item}
				}));
			},
			getVehicle: function () {
				axios.get('/common/vehicle', {
					baseURL: this.baseURL,
					params: {}
				}).then(res => {
					this.vehicle = _.map(res.data, item => item.VEHICLE_NO) || [];
				}).catch(function (error) {
					console.log(error);
				});
			},
			queryVehicleSearch(query, cd) {
				if (query.length < 3) cd(null);
				else {
					setTimeout(() => {
						cd(_.map(_.filter(this.vehicle, item => item.indexOf(query) > -1), item => {
							return {label: item, value: item}
						}))
					}, 200);
				}
			},
			/*事件*/
			handleVehicleSelect(item) {},
			handleCompanyNameSelect(item) {},
			handleQueryClick() {
				this.getIndustryOperations();
			},
			handleExportClick() {
				const {vehicle, companyName, sTime, eTime} = this.query;
				this.$confirm('是否需要导出?', '提示', {
					confirmButtonText: '是',
					cancelButtonText: '否',
					cancelButtonClass: 'el-button--danger',
					closeOnClickModal: false,
					type: 'info',
					center: true
				}).then(() => {
					window.open(`${this.baseURL}/industryOperation/getIndustryOperationsExcel?vehicle=${vehicle}&companyName=${companyName}&stime=${sTime && moment(sTime).format('YYYY-MM-DD HH:mm:ss')}&etime=${eTime && moment(eTime).format('YYYY-MM-DD HH:mm:ss')}`);
				}).catch(() => {});
			},
		},
		components: {
			'tw-unit':TWUnit
		}
	}
</script>

<style scoped>

</style>