<!--维修工单-->
<template>
	<div class="tw-template-wrapper">
		<el-form :inline="true" :model="query" size="small" class="tw-query-bar">
			<el-form-item>
				<el-autocomplete class="inline-input" v-model="query.vehicle" placeholder="车牌号码"
												 :fetch-suggestions="queryVehicleSearch" :trigger-on-focus="false"></el-autocomplete>
			</el-form-item>
			<el-form-item>
				<el-date-picker v-model="query.stime" type="datetime" placeholder="开始日期"></el-date-picker>
			</el-form-item>
			<el-form-item>
				<el-date-picker v-model="query.etime" type="datetime" placeholder="结束日期"></el-date-picker>
			</el-form-item>
			<el-form-item>
			</el-form-item>
			<el-form-item>
				<el-button type="primary" @click="handleQueryClick">查询</el-button>
				<el-button type="primary" @click="handleExportClick">导出</el-button>
			</el-form-item>
		</el-form>
		<div class="tw-query-panel">
			<el-table :data="filterTableList" v-loading="table.loading" border size="small" height="calc(100% - 42px)" style="width: 100%; margin-bottom: 10px;">
				<el-table-column type="index" label="序号" width="60"></el-table-column>
				<el-table-column prop="cphm" label="车牌号码" width="140"></el-table-column>
				<el-table-column prop="gsmc" label="公司名称" width="260"></el-table-column>
				<el-table-column prop="gzlx" label="故障类型" width="140"></el-table-column>
				<el-table-column prop="gzsj" label="故障时间" width="160"></el-table-column>
				<el-table-column prop="beiz" label="备注" mini-width="340"></el-table-column>
				<el-table-column label="操作" width="140">
					<template slot-scope="scope">
						<el-button class="tw-table-button" size="mini" v-if="scope.row.order==='0'" @click="handleReviewClick(scope.row)">工单结束</el-button>
						<span v-else>工单已结束</span>
					</template>
				</el-table-column>
			</el-table>
			<el-pagination background :page-size="table.pageSize" :current-page="table.currentPage" :total="table.total" layout="prev, pager, next" @current-change="handleTablePageCurrentChange"></el-pagination>
		</div>
	</div>
</template>

<script>
	import _ from 'underscore'
	import axios from 'axios'
	import moment from 'moment'
	import {mapGetters} from 'vuex'

	export default {
		name: "RepairWorkOrderInquiry",
		data() {
			return {
				query:{
					vehicle: '',
					stime: '',
					etime:''
				},
				table: {
					loading: false,
					data: [],
					pageSize: 20,
					currentPage: 1,
					total: 0
				}
			}
		},
		mounted() {
			this.$nextTick(() => {
				this.query.stime = moment(moment().format('YYYY-MM-DD 00:00:00'));
				this.query.etime = moment(moment().format('YYYY-MM-DD 23:59:59'));
				this.getWorkOrderInquiry();
			});
		},
		computed: {
			...mapGetters(['getLPNumber']),
			filterTableList() {
				const {data, pageSize, currentPage} = this.table;
				const pageIndex = currentPage - 1;
				return _.filter(data, (item, index) => {
					return index >= pageIndex * pageSize && index < currentPage * pageSize;
				})
			}
		},
		methods: {
			/*接口*/
			queryVehicleSearch(query, cb) {
				if (query.length < 3) cb(null);
				else
					cb(_.filter(this.getLPNumber, item => item.label.indexOf(query) > -1));
			},
			getWorkOrderInquiry(){
				this.table.loading = true;
				const {vehicle, stime,etime}= this.query;
				axios.get('terminal/workorderinquiry', {
					baseURL: this.baseURL,
					params: {
						vehicle,
						stime: stime && moment(stime).format('YYYY-MM-DD HH:mm:ss'),
						etime: etime && moment(etime).format('YYYY-MM-DD HH:mm:ss')
					}
				}).then(res => {
					console.log(res.data);
					this.table.data = _.map(res.data, item => {
						return {
							cphm: item.VEHICLE_NO,
							gsmc: item.COMP_NAME,
							gzlx: item.FAULT_TYPE,
							gzsj: item.TIME,
							order:item.ORDER_RESULT,
							beiz: ""
						}
					});
					this.table.total = this.table.data.length;
					this.table.currentPage = 1;
					this.table.loading = false;
				}).catch(function (error) {
					console.log(error);
				});
			},
			getWorkOrderAudit(item){
				axios.get('terminal/workorderaudit', {
					baseURL: this.baseURL,
					params: {vehicle:item.cphm}
				}).then(res => {
					if(res.data>0){
						this.$message({message: "审核成功!", type: 'success'});
						this.getWorkOrderInquiry();
					}else{
						this.$message.error('审核失败！');
					}
				}).catch(function (error) {
					console.error(error);
				});
			},
			/*事件*/
			handleQueryClick() {
				this.getWorkOrderInquiry();
			},
			handleReviewClick(item) {
				this.$confirm('是否确定结束工单?', '提示', {
					confirmButtonText: '是',
					cancelButtonText: '否',
					cancelButtonClass: 'el-button--danger',
					closeOnClickModal: false,
					type: 'info',
					center: true
				}).then(() => {
					this.getWorkOrderAudit(item);
				}).catch(() => {
				});
			},
			handleExportClick() {
				const {vehicle, stime, etime} = this.query;
				this.$confirm('是否需要导出?', '提示', {
					confirmButtonText: '是',
					cancelButtonText: '否',
					cancelButtonClass: 'el-button--danger',
					closeOnClickModal: false,
					type: 'info',
					center: true
				}).then(() => {
					window.open(`${this.baseURL}terminal/workorderinquirydc?vehicle=${vehicle}&stime=${stime && moment(stime).format('YYYY-MM-DD HH:mm:ss')}&etime=${etime && moment(etime).format('YYYY-MM-DD HH:mm:ss')}`);
				}).catch(() => {
				});
			},
			handleTablePageCurrentChange(index) {
				this.table.currentPage = index;
			}
		}
	}
</script>

<style scoped>

</style>