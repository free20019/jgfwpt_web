<template>
	<div class="tw-system-menu">
		<div class="tw-system-menu-bar" :class="{hover: systemMenuHover || hasTotalMenu}" @mouseenter.stop="handleSystemMenuMouseenter"
				 @mouseleave.stop="handleSystemMenuMouseleave">
			<div class="tw-system-menu-item tw-app-menu-item" @mouseenter.stop="handleSystemMenuMouseenter" @click="handleSystemMenuClick">
				<tw-icon class="tw-icon" icon="icon-application" font-size="24px"></tw-icon>
				<span class="tw-title">所有服务</span>
				<tw-icon class="tw-suffix-icon" icon="icon-expansion-r" font-size="24px"></tw-icon>
			</div>
			<div class="tw-system-menu-item" :class="{active: hasSystemMenuActive(item)}" v-for="item in systemMenuList"
					 @mouseenter.stop="handleSystemMenuMouseenter" @click="handleSystemMenuItemClick(item)">
				<tw-icon class="tw-icon" :icon="item.icon" font-size="24px"></tw-icon>
				<span class="tw-title" v-text="item.title"></span>
			</div>
		</div>
		<transition name="control-strip-fade">
			<div class="tw-secondary-menu-bar" v-show="hasSecondaryMenu">
				<div class="tw-secondary-menu-header" v-text="systemMenuActive.title"></div>
				<tw-menu class="tw-secondary-menu-body" :data="secondaryMenuList[systemMenuActive.id]" height="calc(100% - 50px)" :active="secondaryMenuActive.id"></tw-menu>
			</div>
		</transition>
		<div class="tw-menu-control-strip iconfont"
				 :class="[hasSecondaryMenu ? 'icon-collapse-left' : 'icon-collapse-right', {'system-hover': systemMenuHover || hasTotalMenu}]"
				 @mouseenter.stop="handleControlStripMouseenter" @mouseleave.stop="handleControlStripMouseleave"
				 @click="handleControlStripClick"></div>
		<tw-total-menu class="tw-total-menu" :class="{active: hasTotalMenu}" :system-menu="systemMenuList" :secondary-menu="secondaryMenuList" @total-menu-change="handleTotalMenuChange" @close="handleTotalMenuClose"></tw-total-menu>
	</div>
</template>

<script>
	import _ from 'underscore'
	import TWIcon from '../TWIcon'
	import TWMenu from './TWMenu'
	import TWTotalMenu from './TWTotalMenu'

	export default {
		name: "TWSystemMenu",
		data() {
			return {
				systemMenuHover: false,
				systemMenuActive: {},
				hasSecondaryMenu: true,
				secondaryMenuActive: {},
				hasTotalMenu: false
			}
		},
		props: {
			data: {
				type: Object,
				default: {}
			}
		},
		mounted() {
			this.$nextTick(() => {
				const systemMenuList = this.systemMenuList;
				this.systemMenuActive = _.filter(systemMenuList, (item) => {
					return this.selectRouterPath.path.indexOf(`/${item.id}`) === 0
				})[0] || systemMenuList[0] || {};
				if (this.systemMenuActive.id === 'home')
					this.$emit('display-state', false);
				else
					this.$emit('display-state', true);
			})
		},
		computed: {
			selectRouterPath() {
				return this.$route;
			},
			systemMenuList() {
				return this.data.systemMenu || []
			},
			secondaryMenuList() {
				return this.data.secondaryMenu || {}
			}
		},
		methods: {
			handleSystemMenuMouseenter() {
				this.systemMenuHover = true;
			},
			handleSystemMenuMouseleave() {
				setTimeout(() =>{
					this.systemMenuHover = false;
				}, 300);
			},
			handleSystemMenuClick() {
				this.hasTotalMenu = !this.hasTotalMenu;
			},
			handleSystemMenuItemClick(item) {
				this.systemMenuActive = item;
				this.systemMenuHover = false;
				this.hasSecondaryMenu = true;
				this.hasTotalMenu = false;
				this.$emit('system-item-click', item);
				this.$emit('display-state', true);
			},
			handleControlStripMouseenter() {
				if (this.systemMenuHover) {
					setTimeout(() =>{
						this.systemMenuHover = true;
					}, 300);
				}
			},
			handleControlStripMouseleave() {
				this.systemMenuHover = false;
			},
			handleControlStripClick() {
				this.$emit('display-state', this.hasSecondaryMenu = !this.hasSecondaryMenu);
			},
			handleTotalMenuChange(item) {
				this.systemMenuActive = item.systemMenuItem;
				this.secondaryMenuActive = item.secondaryMenuItem;
				this.hasSecondaryMenu = true;
				this.$emit('display-state', true);
			},
			handleTotalMenuClose() {
				this.hasTotalMenu = false;
			},
			hasSystemMenuActive(item) {
				return this.systemMenuActive.id === item.id;
			}
		},
		components: {
			'tw-icon': TWIcon,
			'tw-menu': TWMenu,
			'tw-total-menu': TWTotalMenu
		}
	}
</script>

<style lang="scss" scoped>
	$totalWidth: 300px;
	$size: 50px;
	.tw-system {
		&-menu {
			position: relative;
			height: 100%;

			&-bar {
				position: relative;
				width: $size;
				height: 100%;
				background-color: #113f67;
				z-index: 2;
				transition: all .5s ease;

				&.hover {
					width: $totalWidth;
				}
			}

			&-item {
				position: relative;
				overflow: hidden;
				height: $size;
				color: #ffffff;
				cursor: pointer;

				&:hover {
					background-color: #408ab4;
				}

				&.active {
					text-shadow: 2px 2px 6px #65c6c4;
					background-color: #408ab4;
				}

				&.tw-app-menu-item {
				}

				.tw-icon, .tw-suffix-icon {
					display: inline-block;
					width: $size;
					height: $size;
					line-height: $size;
					text-align: center;
				}

				.tw-title {
					position: absolute;
					top: 0;
					left: $size;
					overflow: hidden;
					width: calc(100% - #{$size});
					height: 100%;
					font-size: 18px;
					line-height: $size;
					text-indent: 5px;
					white-space: nowrap;
				}

				.tw-suffix-icon {
					position: absolute;
					top: 0;
					left: calc(#{$totalWidth} - #{$size});
				}
			}
		}
	}

	.tw-secondary {
		&-menu {
			$menuHeaderHeight: 50px;

			&-bar {
				position: absolute;
				top: 0;
				left: $size;
				width: $totalWidth - $size;
				height: 100%;
				background-color: #408ab4;
				z-index: 1;
			}

			&-header {
				height: $menuHeaderHeight;
				border-bottom: 1px solid #34699a;
				box-sizing: border-box;
				font-size: 28px;
				line-height: 50px;
				text-align: center;
				white-space: nowrap;
				color: #ffffff;
			}

			&-body {
				overflow-y: auto;
				height: calc(100% - #{$menuHeaderHeight});
			}
		}
	}

	.tw-menu {
		&-control {
			&-strip {
				position: absolute;
				top: calc(50% - 25px);
				left: 100%;
				height: 40px;
				font-size: 18px;
				color: #dfe2e2;
				z-index: 11;
				cursor: pointer;
				transform: translateY(-50%);
				transition: all .5s ease;

				&:before {
					position: absolute;
					top: 50%;
					transform: translateY(-50%);
					transition: all .5s ease;
				}

				&.system-hover {
					left: $totalWidth;
				}

				&.icon-collapse-left {
					left: calc(100% - 18px);
					border-bottom: 9px solid transparent;
					border-left: none;
					border-right: 18px solid #34699a;
					border-top: 9px solid transparent;

					&:before {
						left: 0;
						transform: translateY(-50%);
					}
					&:hover {
						left: calc(100% - 22px);
						border-right: 22px solid #34699a;
						&:before {
							left: 2px;
						}
					}
				}

				&.icon-collapse-right {
					border-bottom: 9px solid transparent;
					border-left: 18px solid #34699a;
					border-right: none;
					border-top: 9px solid transparent;

					&:before {
						left: 0;
						transform: translate(-100%, -50%);
					}
					&:hover {
						border-left: 22px solid #34699a;
						&:before {
							left: -1px;
						}
					}
				}
			}
		}
	}

	.control-strip-fade {
		&-enter-active, &-leave-active {
			transition: opacity .5s;
		}
		&-enter, &-leave-to {
			left: -300px;
			opacity: 0;
		}
	}

	.tw-total-menu {
		display: none;
		&.active {
			display: block;
		}
		&-panel {
			left: $totalWidth;
		}
	}
</style>